

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype LowerIdent = LowerIdent String
  deriving (Eq, Ord, Show, Read)
newtype UpperIdent = UpperIdent String
  deriving (Eq, Ord, Show, Read)
data Program = Program [Import] [Decl]
  deriving (Eq, Ord, Show, Read)

data Import = Import String
  deriving (Eq, Ord, Show, Read)

data Type
    = TVar LowerIdent | TCon UpperIdent [Type] | TArr Type Type
  deriving (Eq, Ord, Show, Read)

data Pat
    = PVar LowerIdent | PCon UpperIdent [Pat] | PLit Lit | PAny
  deriving (Eq, Ord, Show, Read)

data Branch = Branch Pat Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EVar LowerIdent
    | ECon UpperIdent
    | ELit Lit
    | EApp Exp Exp
    | EMul Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EEq Exp Exp
    | EIf Exp Exp Exp
    | ELet LowerIdent Exp Exp
    | ELam LowerIdent Exp
    | ELst [Exp]
    | ECase Exp [Branch]
  deriving (Eq, Ord, Show, Read)

data Decl
    = TDecl LowerIdent Type
    | DataDecl UpperIdent [LowerIdent] [Constr]
    | AssignDecl LowerIdent Exp
    | FunDecl LowerIdent LowerIdent [LowerIdent] Exp
  deriving (Eq, Ord, Show, Read)

data Constr = Constr UpperIdent [Type]
  deriving (Eq, Ord, Show, Read)

data Lit = LInt Integer
  deriving (Eq, Ord, Show, Read)

