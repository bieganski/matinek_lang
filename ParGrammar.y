-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '-' { PT _ (TS _ 6) }
  '->' { PT _ (TS _ 7) }
  ';' { PT _ (TS _ 8) }
  '=' { PT _ (TS _ 9) }
  '==' { PT _ (TS _ 10) }
  '[' { PT _ (TS _ 11) }
  '\\' { PT _ (TS _ 12) }
  ']' { PT _ (TS _ 13) }
  '_' { PT _ (TS _ 14) }
  'case' { PT _ (TS _ 15) }
  'data' { PT _ (TS _ 16) }
  'else' { PT _ (TS _ 17) }
  'if' { PT _ (TS _ 18) }
  'import' { PT _ (TS _ 19) }
  'in' { PT _ (TS _ 20) }
  'let' { PT _ (TS _ 21) }
  'of' { PT _ (TS _ 22) }
  'then' { PT _ (TS _ 23) }
  '{' { PT _ (TS _ 24) }
  '|' { PT _ (TS _ 25) }
  '}' { PT _ (TS _ 26) }

L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }
L_LowerIdent { PT _ (T_LowerIdent $$) }
L_UpperIdent { PT _ (T_UpperIdent $$) }


%%

String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
LowerIdent    :: { LowerIdent} : L_LowerIdent { LowerIdent ($1)}
UpperIdent    :: { UpperIdent} : L_UpperIdent { UpperIdent ($1)}

ListLowerIdent :: { [LowerIdent] }
ListLowerIdent : {- empty -} { [] }
               | LowerIdent ListLowerIdent { (:) $1 $2 }
ListUpperIdent :: { [UpperIdent] }
ListUpperIdent : {- empty -} { [] }
               | UpperIdent ListUpperIdent { (:) $1 $2 }
Program :: { Program }
Program : ListImport ListDataDecl ListDecl { AbsGrammar.Program $1 (reverse $2) (reverse $3) }
Import :: { Import }
Import : 'import' String { AbsGrammar.Import $2 }
ListImport :: { [Import] }
ListImport : {- empty -} { [] }
           | Import { (:[]) $1 }
           | Import ';' ListImport { (:) $1 $3 }
Type1 :: { Type }
Type1 : LowerIdent { AbsGrammar.TVar $1 }
      | UpperIdent ListType { AbsGrammar.TADT $1 (reverse $2) }
      | Type2 '->' Type1 { AbsGrammar.TArr $1 $3 }
      | Type2 { $1 }
ListType :: { [Type] }
ListType : {- empty -} { [] } | ListType Type { flip (:) $1 $2 }
Type :: { Type }
Type : Type1 { $1 }
Type2 :: { Type }
Type2 : '(' Type ')' { $2 }
Pat1 :: { Pat }
Pat1 : LowerIdent { AbsGrammar.PVar $1 } | '(' Pat ')' { $2 }
Pat :: { Pat }
Pat : UpperIdent ListPat { AbsGrammar.PCon $1 (reverse $2) }
    | Lit { AbsGrammar.PLit $1 }
    | '_' { AbsGrammar.PAny }
    | Pat1 { $1 }
ListPat :: { [Pat] }
ListPat : {- empty -} { [] } | ListPat Pat { flip (:) $1 $2 }
Branch :: { Branch }
Branch : Pat '->' Exp { AbsGrammar.Branch $1 $3 }
ListBranch :: { [Branch] }
ListBranch : Branch ';' { (:[]) $1 }
           | Branch ';' ListBranch { (:) $1 $3 }
Exp7 :: { Exp }
Exp7 : LowerIdent { AbsGrammar.EVar $1 }
     | UpperIdent { AbsGrammar.ECon $1 }
     | Lit { AbsGrammar.ELit $1 }
     | '(' Exp ')' { $2 }
Exp6 :: { Exp }
Exp6 : Exp6 Exp7 { AbsGrammar.EApp $1 $2 } | Exp7 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '*' Exp5 { AbsGrammar.EMul $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '+' Exp4 { AbsGrammar.EAdd $1 $3 }
     | Exp3 '-' Exp4 { AbsGrammar.ESub $1 $3 }
     | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '==' Exp3 { AbsGrammar.EEq $1 $3 } | Exp3 { $1 }
Exp :: { Exp }
Exp : 'if' Exp 'then' Exp 'else' Exp { AbsGrammar.EIf $2 $4 $6 }
    | 'let' '{' LowerIdent '=' Exp '}' 'in' Exp { AbsGrammar.ELet $3 $5 $8 }
    | '\\' LowerIdent '->' Exp { AbsGrammar.ELam $2 $4 }
    | '[' ListExp ']' { AbsGrammar.ELst $2 }
    | 'case' Exp 'of' '{' ListBranch '}' { AbsGrammar.ECase $2 $5 }
    | Exp1 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
DataDecl :: { DataDecl }
DataDecl : 'data' UpperIdent ListLowerIdent '=' ListConstr { AbsGrammar.DataDecl $2 $3 $5 }
ListDataDecl :: { [DataDecl] }
ListDataDecl : {- empty -} { [] }
             | ListDataDecl DataDecl ';' { flip (:) $1 $2 }
Decl :: { Decl }
Decl : LowerIdent '=' Exp { AbsGrammar.AssignDecl $1 $3 }
     | LowerIdent LowerIdent ListLowerIdent '=' Exp { AbsGrammar.FunDecl $1 $2 $3 $5 }
     | Decl1 { $1 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] }
         | ListDecl Decl ';' { flip (:) $1 $2 }
Decl1 :: { Decl }
Decl1 : '(' Decl ')' { $2 }
Constr :: { Constr }
Constr : UpperIdent ListType { AbsGrammar.Constr $1 (reverse $2) }
ListConstr :: { [Constr] }
ListConstr : Constr { (:[]) $1 }
           | Constr '|' ListConstr { (:) $1 $3 }
Lit :: { Lit }
Lit : Integer { AbsGrammar.LInt $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

