{-# LANGUAGE CPP #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for PrintGrammar.
--   Generated by the BNF converter.

module PrintGrammar where

import qualified AbsGrammar
import Data.Char

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsGrammar.LowerIdent where
  prt _ (AbsGrammar.LowerIdent i) = doc (showString i)
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsGrammar.UpperIdent where
  prt _ (AbsGrammar.UpperIdent i) = doc (showString i)
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGrammar.LowerIdent] where
  prt = prtList

instance Print [AbsGrammar.UpperIdent] where
  prt = prtList

instance Print AbsGrammar.Program where
  prt i e = case e of
    AbsGrammar.Program imports datadecls decls -> prPrec i 0 (concatD [prt 0 imports, prt 0 datadecls, prt 0 decls])

instance Print AbsGrammar.Import where
  prt i e = case e of
    AbsGrammar.Import str -> prPrec i 0 (concatD [doc (showString "import"), prt 0 str])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsGrammar.Import] where
  prt = prtList

instance Print [AbsGrammar.Type] where
  prt = prtList

instance Print AbsGrammar.Type where
  prt i e = case e of
    AbsGrammar.TVar lowerident -> prPrec i 1 (concatD [prt 0 lowerident])
    AbsGrammar.TADT upperident types -> prPrec i 1 (concatD [prt 0 upperident, prt 0 types])
    AbsGrammar.TArr type_1 type_2 -> prPrec i 1 (concatD [prt 2 type_1, doc (showString "->"), prt 1 type_2])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print AbsGrammar.Pat where
  prt i e = case e of
    AbsGrammar.PVar lowerident -> prPrec i 1 (concatD [prt 0 lowerident])
    AbsGrammar.PCon upperident pats -> prPrec i 0 (concatD [prt 0 upperident, prt 0 pats])
    AbsGrammar.PLit lit -> prPrec i 0 (concatD [prt 0 lit])
    AbsGrammar.PAny -> prPrec i 0 (concatD [doc (showString "_")])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [AbsGrammar.Pat] where
  prt = prtList

instance Print AbsGrammar.Branch where
  prt i e = case e of
    AbsGrammar.Branch pat exp -> prPrec i 0 (concatD [prt 0 pat, doc (showString "->"), prt 0 exp])
  prtList _ [x] = concatD [prt 0 x, doc (showString ";")]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsGrammar.Branch] where
  prt = prtList

instance Print AbsGrammar.Exp where
  prt i e = case e of
    AbsGrammar.EVar lowerident -> prPrec i 7 (concatD [prt 0 lowerident])
    AbsGrammar.ECon upperident -> prPrec i 7 (concatD [prt 0 upperident])
    AbsGrammar.ELit lit -> prPrec i 7 (concatD [prt 0 lit])
    AbsGrammar.EApp exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, prt 7 exp2])
    AbsGrammar.EMul exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "*"), prt 5 exp2])
    AbsGrammar.EAdd exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "+"), prt 4 exp2])
    AbsGrammar.ESub exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "-"), prt 4 exp2])
    AbsGrammar.EEq exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "=="), prt 3 exp2])
    AbsGrammar.EIf exp1 exp2 exp3 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 0 exp3])
    AbsGrammar.ELet lowerident exp1 exp2 -> prPrec i 0 (concatD [doc (showString "let"), doc (showString "{"), prt 0 lowerident, doc (showString "="), prt 0 exp1, doc (showString "}"), doc (showString "in"), prt 0 exp2])
    AbsGrammar.ELam lowerident exp -> prPrec i 0 (concatD [doc (showString "\\"), prt 0 lowerident, doc (showString "->"), prt 0 exp])
    AbsGrammar.ELst exps -> prPrec i 0 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])
    AbsGrammar.ECase exp branchs -> prPrec i 0 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), doc (showString "{"), prt 0 branchs, doc (showString "}")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [AbsGrammar.Exp] where
  prt = prtList

instance Print AbsGrammar.DataDecl where
  prt i e = case e of
    AbsGrammar.DataDecl upperident loweridents constrs -> prPrec i 0 (concatD [doc (showString "data"), prt 0 upperident, prt 0 loweridents, doc (showString "="), prt 0 constrs])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsGrammar.DataDecl] where
  prt = prtList

instance Print AbsGrammar.Decl where
  prt i e = case e of
    AbsGrammar.AssignDecl lowerident exp -> prPrec i 0 (concatD [prt 0 lowerident, doc (showString "="), prt 0 exp])
    AbsGrammar.FunDecl lowerident1 lowerident2 loweridents exp -> prPrec i 0 (concatD [prt 0 lowerident1, prt 0 lowerident2, prt 0 loweridents, doc (showString "="), prt 0 exp])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [AbsGrammar.Decl] where
  prt = prtList

instance Print AbsGrammar.Constr where
  prt i e = case e of
    AbsGrammar.Constr upperident types -> prPrec i 0 (concatD [prt 0 upperident, prt 0 types])
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print [AbsGrammar.Constr] where
  prt = prtList

instance Print AbsGrammar.Lit where
  prt i e = case e of
    AbsGrammar.LInt n -> prPrec i 0 (concatD [prt 0 n])

