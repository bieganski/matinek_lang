token LowerIdent ( lower (letter | '_')* ) ;

separator LowerIdent "" ;

token UpperIdent ( upper (letter | '_')* ) ;

separator UpperIdent "" ;


layout toplevel ;


comment    "#" ;

comment    "{#" "#}" ;




entrypoints Program ;

Program.    Program ::= [Import] [Decl]  ;



Import.     Import ::= "import" String ;

separator Import ";" ;



TVar.       Type1 ::= LowerIdent ; 

TCon.       Type1 ::= UpperIdent [Type] ; -- Nil / Maybe a

TArr.       Type1 ::= Type2 "->" Type1 ;

separator Type "" ;

coercions Type 2 ;



PVar.       Pat1 ::= LowerIdent ;
PCon.       Pat ::= UpperIdent [Pat] ;
PLit.       Pat ::= Lit ;
PAny.       Pat ::= "_" ;

coercions Pat 1 ;

separator Pat "" ;



Branch.     Branch ::= Pat "->" Exp ;

separator Branch ";" ;




EVar.       Exp7 ::= LowerIdent ;

ECon.       Exp7 ::= UpperIdent ;

ELit.       Exp7 ::= Lit ;

EApp.       Exp6 ::= Exp6 Exp7;

EMul.       Exp4 ::= Exp4 "*" Exp5 ;

EAdd.       Exp3 ::= Exp3 "+" Exp4 ;

ESub.       Exp3 ::= Exp3 "-" Exp4 ;

EEq.        Exp2 ::= Exp2 "==" Exp3 ;

EIf.        Exp ::= "if" Exp "then" Exp "else" Exp ;

ELet.       Exp ::= "let" "{" LowerIdent "=" Exp "}" "in" Exp ;

ELam.       Exp ::= "\\" LowerIdent "->" Exp ;

ELst.       Exp ::= "[" [Exp] "]" ;

ECase.      Exp ::= "case" Exp "of" "{" [Branch] "}" ;

layout "of" ;

separator  Exp "," ;

coercions  Exp 7 ;




TDecl.          Decl ::= LowerIdent "::" Type ;

DataDecl.       Decl ::= "data" UpperIdent [LowerIdent] "=" [Constr] ;

AssignDecl.     Decl ::= LowerIdent "=" Exp ;

-- at least 2 idents at left to differ from AssignDecl
FunDecl.        Decl ::= LowerIdent LowerIdent [LowerIdent] "=" Exp ;

terminator Decl ";" ;




Constr.     Constr ::= UpperIdent [Type] ;

separator nonempty Constr "|" ;




LInt.       Lit ::= Integer ;

